[tox]
envlist = centos8-{bluestore,filestore}-{single_type,single_type_dmcrypt},centos8-{bluestore,filestore}-{mixed_type,mixed_type_dmcrypt,mixed_type_explicit, mixed_type_dmcrypt_explicit}
skipsdist = True

[testenv]
deps = mock
whitelist_externals =
    vagrant
    bash
    git
    cp
    sleep
passenv=*
setenv=
  ANSIBLE_CONFIG = {envdir}/tmp/ceph-ansible/ansible.cfg
  ANSIBLE_SSH_ARGS = -F {changedir}/vagrant_ssh_config -o ControlMaster=auto -o ControlPersist=600s -o PreferredAuthentications=publickey
  ANSIBLE_STDOUT_CALLBACK = debug
  VAGRANT_CWD = {changedir}
  CEPH_VOLUME_DEBUG = 1
  DEBIAN_FRONTEND=noninteractive
changedir=
  centos8-filestore-single_type: {toxinidir}/centos8/filestore/single-type
  centos8-filestore-single_type_dmcrypt: {toxinidir}/centos8/filestore/single-type-dmcrypt
  centos8-filestore-mixed_type: {toxinidir}/centos8/filestore/mixed-type
  centos8-filestore-mixed_type_dmcrypt: {toxinidir}/centos8/filestore/mixed-type-dmcrypt
  centos8-filestore-mixed_type_explicit: {toxinidir}/centos8/filestore/mixed-type-explicit
  centos8-filestore-mixed_type_dmcrypt_explicit: {toxinidir}/centos8/filestore/mixed-type-dmcrypt-explicit
  centos8-bluestore-single_type: {toxinidir}/centos8/bluestore/single-type
  centos8-bluestore-single_type_dmcrypt: {toxinidir}/centos8/bluestore/single-type-dmcrypt
  centos8-bluestore-mixed_type: {toxinidir}/centos8/bluestore/mixed-type
  centos8-bluestore-mixed_type_dmcrypt: {toxinidir}/centos8/bluestore/mixed-type-dmcrypt
  centos8-bluestore-mixed_type_explicit: {toxinidir}/centos8/bluestore/mixed-type-explicit
  centos8-bluestore-mixed_type_dmcrypt_explicit: {toxinidir}/centos8/bluestore/mixed-type-dmcrypt-explicit
commands=
  git clone -b {env:CEPH_ANSIBLE_BRANCH:master} --single-branch {env:CEPH_ANSIBLE_CLONE:"https://github.com/ceph/ceph-ansible.git"} {envdir}/tmp/ceph-ansible
  python -m pip install -r {envdir}/tmp/ceph-ansible/tests/requirements.txt

  # bash {toxinidir}/../scripts/vagrant_up.sh {env:VAGRANT_UP_FLAGS:""} {posargs:--provider=virtualbox}
  bash {toxinidir}/../scripts/vagrant_up.sh {posargs:--provider=virtualbox}
  bash {toxinidir}/../scripts/generate_ssh_config.sh {changedir}

  cp {toxinidir}/../playbooks/deploy.yml {envdir}/tmp/ceph-ansible

  # individual scenario setup
  ansible-playbook -vv -i {changedir}/hosts {changedir}/setup.yml

  # use ceph-ansible to deploy a ceph cluster on the vms
  ansible-playbook -vv -i {changedir}/hosts {envdir}/tmp/ceph-ansible/deploy.yml --extra-vars "fetch_directory={changedir}/fetch ceph_dev_branch={env:CEPH_DEV_BRANCH:master} ceph_dev_sha1={env:CEPH_DEV_SHA1:latest} toxinidir={toxinidir}"

  # prepare nodes for testing with testinfra
  ansible-playbook -vv -i {changedir}/hosts {envdir}/tmp/ceph-ansible/tests/functional/setup.yml

  # test cluster state using testinfra
  py.test --reruns 5 --reruns-delay 10 -n 4 --sudo -v --connection=ansible --ssh-config={changedir}/vagrant_ssh_config --ansible-inventory={changedir}/hosts {toxinidir}/../tests

  # reboot all vms - attempt
  bash {toxinidir}/../scripts/vagrant_reload.sh {env:VAGRANT_UP_FLAGS:"--no-provision"} {posargs:--provider=virtualbox}

  # after a reboot, osds may take about 20 seconds to come back up
  sleep 30

  # retest to ensure cluster came back up correctly after rebooting
  py.test --reruns 5 --reruns-delay 10 -n 4 --sudo -v --connection=ansible --ssh-config={changedir}/vagrant_ssh_config --ansible-inventory={changedir}/hosts {toxinidir}/../tests

  # destroy an OSD, zap it's device and recreate it using it's ID
  ansible-playbook -vv -i {changedir}/hosts {changedir}/test.yml

  # retest to ensure cluster came back up correctly
  py.test --reruns 5 --reruns-delay 10 -n 4 --sudo -v --connection=ansible --ssh-config={changedir}/vagrant_ssh_config --ansible-inventory={changedir}/hosts {toxinidir}/../tests

  # test zap OSDs by ID
  ansible-playbook -vv -i {changedir}/hosts {changedir}/test_zap.yml

  vagrant destroy {env:VAGRANT_DESTROY_FLAGS:"--force"}
